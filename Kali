#!/usr/bin/env bash

# Function to print text in a specified color
function echo_color() {
  local color=$1
  shift
  echo -e "\\e[${color}m$*\\e[0m"
}

# Launch CSGO in the background and wait for it to start
function launch_csgo() {
  local csgo_pid=$(pgrep -x csgo_linux64)
  echo_color 33 "Launching CSGO"
  nohup steam steam://rungameid/730 >/dev/null 2>&1 &
  echo -ne "Launching..."
  while [ -z "$csgo_pid" ]; do
    csgo_pid=$(pgrep -x csgo_linux64)
    echo -ne "."
  done
  echo
  echo_color 32 "Wait for 25 sec"
  sleep 25
}

# Build the project with the specified build type
function build() {
  local build_type=$1
  cmake -D CMAKE_BUILD_TYPE=$build_type . || exit 1

  # Check if patchelf is installed
  if ! hash patchelf 2>/dev/null; then
    echo_color 31 "You need to install the \"patchelf\" command!\nUse your package manager to install it, or get source here:\nhttps://github.com/NixOS/patchelf"
    exit 1
  fi

  # Remove build_id_hex file if it exists
  rm -f build_id_hex

  # Generate a random build ID
  local build_id=$(get_random_line build_names)
  while [ -f "/usr/lib/${build_id}" ] || lsof -p $(pgrep -x csgo_linux64) | grep "${build_id}"; do
    build_id=$(get_random_line build_names)
  done

  # Hexify build ID and write it to build_id_hex
  for ((i = 0; i < ${#build_id}; i++)); do
    printf '0x%x,\n' "'${build_id:$i:1}" >>build_id_hex
  done
  printf '0x0' >>build_id_hex

  # Build the project
  make -j$(nproc) || exit 1

  # Clean up old build files
  if [ -f build_id ]; then
    filename=$(cat build_id)
    rm "$filename"
    if [ -f "/usr/lib/${filename}" ]; then
      echo -e "Note: Old file found at /usr/lib/${filename}\n"
      #sudo rm "/usr/lib/${filename}"
    fi
    chmod 660 build_id
    mv build_id build_id_old
  fi

  # Rename the shared library and set its soname
  echo $build_id >build_id
  mv libKali.so "$build_id"
  strip -s -v "$build_id"
  patchelf --set-soname "$build_id" "$build_id" || \
    echo_color 33 "Warning: your patchelf
